--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed May 14 21:51:36 EEST 2025
=== ztest3677874.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3677874.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3677874.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3677874.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3677874.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3677874.c
Checking for size_t... Yes.


=== ztest3677874.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3677874.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3677874 ztest3677874.c
Checking for strerror... Yes.

=== ztest3677874.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for unistd.h... Yes.

=== ztest3677874.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for stdarg.h... Yes.

=== ztest3677874.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3677874.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3677874 ztest3677874.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3677874.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for return value of vsnprintf()... Yes.

=== ztest3677874.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 22:54:07 EEST 2025
=== ztest1451336.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1451336.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1451336.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1451336.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1451336.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1451336.c
Checking for size_t... Yes.


=== ztest1451336.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1451336.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1451336 ztest1451336.c
Checking for strerror... Yes.

=== ztest1451336.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for unistd.h... Yes.

=== ztest1451336.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for stdarg.h... Yes.

=== ztest1451336.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1451336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1451336 ztest1451336.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1451336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for return value of vsnprintf()... Yes.

=== ztest1451336.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:00:37 EEST 2025
=== ztest1464781.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1464781.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1464781.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1464781.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1464781.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1464781.c
Checking for size_t... Yes.


=== ztest1464781.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1464781.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1464781 ztest1464781.c
Checking for strerror... Yes.

=== ztest1464781.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for unistd.h... Yes.

=== ztest1464781.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for stdarg.h... Yes.

=== ztest1464781.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1464781.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1464781 ztest1464781.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1464781.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for return value of vsnprintf()... Yes.

=== ztest1464781.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:02:21 EEST 2025
=== ztest1469617.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1469617.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1469617.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1469617.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1469617.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1469617.c
Checking for size_t... Yes.


=== ztest1469617.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1469617.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1469617 ztest1469617.c
Checking for strerror... Yes.

=== ztest1469617.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for unistd.h... Yes.

=== ztest1469617.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for stdarg.h... Yes.

=== ztest1469617.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1469617.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1469617 ztest1469617.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1469617.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for return value of vsnprintf()... Yes.

=== ztest1469617.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:02:46 EEST 2025
=== ztest1472847.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1472847.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1472847.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1472847.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1472847.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1472847.c
Checking for size_t... Yes.


=== ztest1472847.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1472847.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1472847 ztest1472847.c
Checking for strerror... Yes.

=== ztest1472847.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for unistd.h... Yes.

=== ztest1472847.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for stdarg.h... Yes.

=== ztest1472847.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1472847.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1472847 ztest1472847.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1472847.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for return value of vsnprintf()... Yes.

=== ztest1472847.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:04:09 EEST 2025
=== ztest1477280.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1477280.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1477280.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1477280.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1477280.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1477280.c
Checking for size_t... Yes.


=== ztest1477280.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1477280.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1477280 ztest1477280.c
Checking for strerror... Yes.

=== ztest1477280.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for unistd.h... Yes.

=== ztest1477280.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for stdarg.h... Yes.

=== ztest1477280.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1477280.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1477280 ztest1477280.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1477280.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for return value of vsnprintf()... Yes.

=== ztest1477280.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 22:29:12 EEST 2025
=== ztest3900345.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3900345.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3900345.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3900345.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3900345.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3900345.c
Checking for size_t... Yes.


=== ztest3900345.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3900345.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3900345 ztest3900345.c
Checking for strerror... Yes.

=== ztest3900345.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for unistd.h... Yes.

=== ztest3900345.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for stdarg.h... Yes.

=== ztest3900345.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3900345.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3900345 ztest3900345.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3900345.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for return value of vsnprintf()... Yes.

=== ztest3900345.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 22:38:35 EEST 2025
=== ztest120363.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest120363.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest120363.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest120363.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest120363.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest120363.c
Checking for size_t... Yes.


=== ztest120363.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest120363.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest120363 ztest120363.c
Checking for strerror... Yes.

=== ztest120363.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for unistd.h... Yes.

=== ztest120363.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for stdarg.h... Yes.

=== ztest120363.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest120363.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest120363 ztest120363.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest120363.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for return value of vsnprintf()... Yes.

=== ztest120363.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 22:49:52 EEST 2025
=== ztest473151.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest473151.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest473151.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest473151.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest473151.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest473151.c
Checking for size_t... Yes.


=== ztest473151.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest473151.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest473151 ztest473151.c
Checking for strerror... Yes.

=== ztest473151.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for unistd.h... Yes.

=== ztest473151.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for stdarg.h... Yes.

=== ztest473151.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest473151.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest473151 ztest473151.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest473151.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for return value of vsnprintf()... Yes.

=== ztest473151.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:00:22 EEST 2025
=== ztest679854.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest679854.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest679854.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest679854.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest679854.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest679854.c
Checking for size_t... Yes.


=== ztest679854.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest679854.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest679854 ztest679854.c
Checking for strerror... Yes.

=== ztest679854.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for unistd.h... Yes.

=== ztest679854.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for stdarg.h... Yes.

=== ztest679854.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest679854.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest679854 ztest679854.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest679854.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for return value of vsnprintf()... Yes.

=== ztest679854.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:03:08 EEST 2025
=== ztest735811.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest735811.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest735811.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest735811.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest735811.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest735811.c
Checking for size_t... Yes.


=== ztest735811.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest735811.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest735811 ztest735811.c
Checking for strerror... Yes.

=== ztest735811.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for unistd.h... Yes.

=== ztest735811.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for stdarg.h... Yes.

=== ztest735811.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest735811.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest735811 ztest735811.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest735811.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for return value of vsnprintf()... Yes.

=== ztest735811.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:14:04 EEST 2025
=== ztest984162.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest984162.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest984162.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest984162.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest984162.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest984162.c
Checking for size_t... Yes.


=== ztest984162.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest984162.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest984162 ztest984162.c
Checking for strerror... Yes.

=== ztest984162.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for unistd.h... Yes.

=== ztest984162.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for stdarg.h... Yes.

=== ztest984162.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest984162.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest984162 ztest984162.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest984162.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for return value of vsnprintf()... Yes.

=== ztest984162.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:19:07 EEST 2025
=== ztest1140414.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1140414.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1140414.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1140414.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1140414.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1140414.c
Checking for size_t... Yes.


=== ztest1140414.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1140414.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1140414 ztest1140414.c
Checking for strerror... Yes.

=== ztest1140414.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for unistd.h... Yes.

=== ztest1140414.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for stdarg.h... Yes.

=== ztest1140414.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1140414.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1140414 ztest1140414.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1140414.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for return value of vsnprintf()... Yes.

=== ztest1140414.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:38:58 EEST 2025
=== ztest3443649.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3443649.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3443649.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3443649.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3443649.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3443649.c
Checking for size_t... Yes.


=== ztest3443649.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3443649.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3443649 ztest3443649.c
Checking for strerror... Yes.

=== ztest3443649.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for unistd.h... Yes.

=== ztest3443649.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for stdarg.h... Yes.

=== ztest3443649.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3443649.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3443649 ztest3443649.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3443649.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for return value of vsnprintf()... Yes.

=== ztest3443649.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:41:10 EEST 2025
=== ztest3452912.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3452912.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3452912.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3452912.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3452912.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3452912.c
Checking for size_t... Yes.


=== ztest3452912.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3452912.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3452912 ztest3452912.c
Checking for strerror... Yes.

=== ztest3452912.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for unistd.h... Yes.

=== ztest3452912.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for stdarg.h... Yes.

=== ztest3452912.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3452912.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3452912 ztest3452912.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3452912.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for return value of vsnprintf()... Yes.

=== ztest3452912.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:44:42 EEST 2025
=== ztest3465658.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3465658.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3465658.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3465658.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3465658.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3465658.c
Checking for size_t... Yes.


=== ztest3465658.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3465658.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3465658 ztest3465658.c
Checking for strerror... Yes.

=== ztest3465658.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for unistd.h... Yes.

=== ztest3465658.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for stdarg.h... Yes.

=== ztest3465658.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3465658.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3465658 ztest3465658.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3465658.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for return value of vsnprintf()... Yes.

=== ztest3465658.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:46:29 EEST 2025
=== ztest3475708.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3475708.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3475708.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3475708.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3475708.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3475708.c
Checking for size_t... Yes.


=== ztest3475708.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3475708.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3475708 ztest3475708.c
Checking for strerror... Yes.

=== ztest3475708.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for unistd.h... Yes.

=== ztest3475708.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for stdarg.h... Yes.

=== ztest3475708.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3475708.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3475708 ztest3475708.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3475708.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for return value of vsnprintf()... Yes.

=== ztest3475708.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:48:14 EEST 2025
=== ztest3483962.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3483962.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3483962.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3483962.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3483962.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3483962.c
Checking for size_t... Yes.


=== ztest3483962.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3483962.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3483962 ztest3483962.c
Checking for strerror... Yes.

=== ztest3483962.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for unistd.h... Yes.

=== ztest3483962.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for stdarg.h... Yes.

=== ztest3483962.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3483962.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3483962 ztest3483962.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3483962.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for return value of vsnprintf()... Yes.

=== ztest3483962.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:55:02 EEST 2025
=== ztest3504767.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3504767.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3504767.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3504767.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3504767.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3504767.c
Checking for size_t... Yes.


=== ztest3504767.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3504767.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3504767 ztest3504767.c
Checking for strerror... Yes.

=== ztest3504767.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for unistd.h... Yes.

=== ztest3504767.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for stdarg.h... Yes.

=== ztest3504767.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3504767.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3504767 ztest3504767.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3504767.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for return value of vsnprintf()... Yes.

=== ztest3504767.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 18:01:58 EEST 2025
=== ztest3527256.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3527256.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3527256.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3527256.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3527256.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3527256.c
Checking for size_t... Yes.


=== ztest3527256.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3527256.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3527256 ztest3527256.c
Checking for strerror... Yes.

=== ztest3527256.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for unistd.h... Yes.

=== ztest3527256.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for stdarg.h... Yes.

=== ztest3527256.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3527256.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3527256 ztest3527256.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3527256.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for return value of vsnprintf()... Yes.

=== ztest3527256.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 18:05:25 EEST 2025
=== ztest3539393.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3539393.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3539393.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3539393.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3539393.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3539393.c
Checking for size_t... Yes.


=== ztest3539393.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3539393.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3539393 ztest3539393.c
Checking for strerror... Yes.

=== ztest3539393.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for unistd.h... Yes.

=== ztest3539393.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for stdarg.h... Yes.

=== ztest3539393.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3539393.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3539393 ztest3539393.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3539393.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for return value of vsnprintf()... Yes.

=== ztest3539393.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 18:08:25 EEST 2025
=== ztest3550057.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3550057.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3550057.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3550057.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3550057.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3550057.c
Checking for size_t... Yes.


=== ztest3550057.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3550057.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3550057 ztest3550057.c
Checking for strerror... Yes.

=== ztest3550057.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for unistd.h... Yes.

=== ztest3550057.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for stdarg.h... Yes.

=== ztest3550057.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3550057.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3550057 ztest3550057.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3550057.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for return value of vsnprintf()... Yes.

=== ztest3550057.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:20:12 EEST 2025
=== ztest3742451.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3742451.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3742451.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3742451.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3742451.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3742451.c
Checking for size_t... Yes.


=== ztest3742451.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3742451.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3742451 ztest3742451.c
Checking for strerror... Yes.

=== ztest3742451.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for unistd.h... Yes.

=== ztest3742451.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for stdarg.h... Yes.

=== ztest3742451.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3742451.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3742451 ztest3742451.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3742451.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for return value of vsnprintf()... Yes.

=== ztest3742451.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:30:23 EEST 2025
=== ztest3774325.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3774325.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3774325.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3774325.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3774325.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3774325.c
Checking for size_t... Yes.


=== ztest3774325.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3774325.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3774325 ztest3774325.c
Checking for strerror... Yes.

=== ztest3774325.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for unistd.h... Yes.

=== ztest3774325.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for stdarg.h... Yes.

=== ztest3774325.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3774325.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3774325 ztest3774325.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3774325.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for return value of vsnprintf()... Yes.

=== ztest3774325.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:42:06 EEST 2025
Checking for gcc...
=== ztest3808708.c ===
extern int getchar();
int hello() {return getchar();}
===
-c ztest3808708.c
... using

Checking for obsessive-compulsive compiler options...
=== ztest3808708.c ===
int foo() { return 0; }
===
-c -O ztest3808708.c
./configure: 370: -c: not found
(exit code 127)
Compiler error reporting is too harsh for ./configure (perhaps remove -Werror).
** ./configure aborting.
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:45:29 EEST 2025
=== ztest3823757.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3823757.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3823757.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3823757.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3823757.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3823757.c
Checking for size_t... Yes.


=== ztest3823757.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3823757.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3823757 ztest3823757.c
Checking for strerror... Yes.

=== ztest3823757.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for unistd.h... Yes.

=== ztest3823757.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for stdarg.h... Yes.

=== ztest3823757.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3823757.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3823757 ztest3823757.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3823757.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for return value of vsnprintf()... Yes.

=== ztest3823757.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:59:55 EEST 2025
=== ztest3868416.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3868416.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3868416.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3868416.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3868416.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3868416.c
Checking for size_t... Yes.


=== ztest3868416.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3868416.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3868416 ztest3868416.c
Checking for strerror... Yes.

=== ztest3868416.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for unistd.h... Yes.

=== ztest3868416.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for stdarg.h... Yes.

=== ztest3868416.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3868416.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3868416 ztest3868416.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3868416.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for return value of vsnprintf()... Yes.

=== ztest3868416.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 21:49:57 EEST 2025
=== ztest4116626.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4116626.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4116626.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4116626.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4116626.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4116626.c
Checking for size_t... Yes.


=== ztest4116626.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4116626.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4116626 ztest4116626.c
Checking for strerror... Yes.

=== ztest4116626.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for unistd.h... Yes.

=== ztest4116626.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for stdarg.h... Yes.

=== ztest4116626.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4116626.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4116626 ztest4116626.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4116626.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for return value of vsnprintf()... Yes.

=== ztest4116626.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 21:51:49 EEST 2025
=== ztest4123512.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4123512.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4123512.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4123512.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4123512.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4123512.c
Checking for size_t... Yes.


=== ztest4123512.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4123512.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4123512 ztest4123512.c
Checking for strerror... Yes.

=== ztest4123512.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for unistd.h... Yes.

=== ztest4123512.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for stdarg.h... Yes.

=== ztest4123512.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4123512.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4123512 ztest4123512.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4123512.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for return value of vsnprintf()... Yes.

=== ztest4123512.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 21:55:04 EEST 2025
=== ztest4132853.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4132853.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4132853.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4132853.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4132853.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4132853.c
Checking for size_t... Yes.


=== ztest4132853.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4132853.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4132853 ztest4132853.c
Checking for strerror... Yes.

=== ztest4132853.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for unistd.h... Yes.

=== ztest4132853.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for stdarg.h... Yes.

=== ztest4132853.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4132853.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4132853 ztest4132853.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4132853.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for return value of vsnprintf()... Yes.

=== ztest4132853.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:10:13 EEST 2025
=== ztest4167107.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4167107.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4167107.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4167107.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4167107.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4167107.c
Checking for size_t... Yes.


=== ztest4167107.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4167107.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4167107 ztest4167107.c
Checking for strerror... Yes.

=== ztest4167107.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for unistd.h... Yes.

=== ztest4167107.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for stdarg.h... Yes.

=== ztest4167107.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4167107.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4167107 ztest4167107.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4167107.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for return value of vsnprintf()... Yes.

=== ztest4167107.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:13:49 EEST 2025
=== ztest4178430.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4178430.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4178430.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4178430.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4178430.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4178430.c
Checking for size_t... Yes.


=== ztest4178430.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4178430.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4178430 ztest4178430.c
Checking for strerror... Yes.

=== ztest4178430.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for unistd.h... Yes.

=== ztest4178430.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for stdarg.h... Yes.

=== ztest4178430.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4178430.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4178430 ztest4178430.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4178430.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for return value of vsnprintf()... Yes.

=== ztest4178430.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:16:08 EEST 2025
=== ztest4186527.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4186527.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4186527.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4186527.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4186527.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4186527.c
Checking for size_t... Yes.


=== ztest4186527.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4186527.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4186527 ztest4186527.c
Checking for strerror... Yes.

=== ztest4186527.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for unistd.h... Yes.

=== ztest4186527.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for stdarg.h... Yes.

=== ztest4186527.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4186527.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4186527 ztest4186527.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4186527.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for return value of vsnprintf()... Yes.

=== ztest4186527.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:16:37 EEST 2025
=== ztest4190369.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4190369.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4190369.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4190369.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4190369.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4190369.c
Checking for size_t... Yes.


=== ztest4190369.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4190369.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4190369 ztest4190369.c
Checking for strerror... Yes.

=== ztest4190369.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for unistd.h... Yes.

=== ztest4190369.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for stdarg.h... Yes.

=== ztest4190369.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4190369.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4190369 ztest4190369.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4190369.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for return value of vsnprintf()... Yes.

=== ztest4190369.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:29:15 EEST 2025
=== ztest29651.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest29651.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest29651.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest29651.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest29651.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest29651.c
Checking for size_t... Yes.


=== ztest29651.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest29651.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest29651 ztest29651.c
Checking for strerror... Yes.

=== ztest29651.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for unistd.h... Yes.

=== ztest29651.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for stdarg.h... Yes.

=== ztest29651.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest29651.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest29651 ztest29651.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest29651.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for return value of vsnprintf()... Yes.

=== ztest29651.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:29:42 EEST 2025
=== ztest33392.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest33392.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest33392.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest33392.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest33392.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest33392.c
Checking for size_t... Yes.


=== ztest33392.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest33392.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest33392 ztest33392.c
Checking for strerror... Yes.

=== ztest33392.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for unistd.h... Yes.

=== ztest33392.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for stdarg.h... Yes.

=== ztest33392.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest33392.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest33392 ztest33392.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest33392.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for return value of vsnprintf()... Yes.

=== ztest33392.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:33:01 EEST 2025
=== ztest43559.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest43559.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest43559.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest43559.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest43559.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest43559.c
Checking for size_t... Yes.


=== ztest43559.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest43559.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest43559 ztest43559.c
Checking for strerror... Yes.

=== ztest43559.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for unistd.h... Yes.

=== ztest43559.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for stdarg.h... Yes.

=== ztest43559.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest43559.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest43559 ztest43559.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest43559.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for return value of vsnprintf()... Yes.

=== ztest43559.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed May 28 12:04:25 EEST 2025
=== ztest1811569.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1811569.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1811569.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1811569.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1811569.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1811569.c
Checking for size_t... Yes.


=== ztest1811569.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1811569.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1811569.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1811569 ztest1811569.c
Checking for strerror... Yes.

=== ztest1811569.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1811569.c
Checking for unistd.h... Yes.

=== ztest1811569.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1811569.c
Checking for stdarg.h... Yes.

=== ztest1811569.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1811569.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1811569.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1811569 ztest1811569.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1811569.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1811569.c
Checking for return value of vsnprintf()... Yes.

=== ztest1811569.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1811569.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 21:26:49 EEST 2025
=== ztest1698771.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1698771.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1698771.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1698771.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1698771.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1698771.c
Checking for size_t... Yes.


=== ztest1698771.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1698771.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1698771.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1698771 ztest1698771.c
Checking for strerror... Yes.

=== ztest1698771.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1698771.c
Checking for unistd.h... Yes.

=== ztest1698771.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1698771.c
Checking for stdarg.h... Yes.

=== ztest1698771.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1698771.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1698771.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1698771 ztest1698771.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1698771.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1698771.c
Checking for return value of vsnprintf()... Yes.

=== ztest1698771.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1698771.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 21:34:21 EEST 2025
=== ztest1711050.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1711050.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1711050.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1711050.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1711050.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1711050.c
Checking for size_t... Yes.


=== ztest1711050.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1711050.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1711050.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1711050 ztest1711050.c
Checking for strerror... Yes.

=== ztest1711050.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1711050.c
Checking for unistd.h... Yes.

=== ztest1711050.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1711050.c
Checking for stdarg.h... Yes.

=== ztest1711050.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1711050.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1711050.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1711050 ztest1711050.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1711050.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1711050.c
Checking for return value of vsnprintf()... Yes.

=== ztest1711050.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1711050.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 21:38:15 EEST 2025
=== ztest1721495.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1721495.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1721495.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1721495.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1721495.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1721495.c
Checking for size_t... Yes.


=== ztest1721495.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721495.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1721495.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1721495 ztest1721495.c
Checking for strerror... Yes.

=== ztest1721495.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721495.c
Checking for unistd.h... Yes.

=== ztest1721495.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721495.c
Checking for stdarg.h... Yes.

=== ztest1721495.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721495.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1721495.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1721495 ztest1721495.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1721495.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721495.c
Checking for return value of vsnprintf()... Yes.

=== ztest1721495.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1721495.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 21:40:49 EEST 2025
=== ztest1728342.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1728342.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1728342.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1728342.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1728342.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1728342.c
Checking for size_t... Yes.


=== ztest1728342.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1728342.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1728342.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1728342 ztest1728342.c
Checking for strerror... Yes.

=== ztest1728342.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1728342.c
Checking for unistd.h... Yes.

=== ztest1728342.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1728342.c
Checking for stdarg.h... Yes.

=== ztest1728342.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1728342.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1728342.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1728342 ztest1728342.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1728342.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1728342.c
Checking for return value of vsnprintf()... Yes.

=== ztest1728342.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1728342.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 21:41:29 EEST 2025
=== ztest1732032.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1732032.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1732032.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1732032.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1732032.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1732032.c
Checking for size_t... Yes.


=== ztest1732032.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1732032.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1732032.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1732032 ztest1732032.c
Checking for strerror... Yes.

=== ztest1732032.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1732032.c
Checking for unistd.h... Yes.

=== ztest1732032.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1732032.c
Checking for stdarg.h... Yes.

=== ztest1732032.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1732032.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1732032.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1732032 ztest1732032.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1732032.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1732032.c
Checking for return value of vsnprintf()... Yes.

=== ztest1732032.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1732032.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 21:42:24 EEST 2025
=== ztest1738025.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1738025.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1738025.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1738025.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1738025.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1738025.c
Checking for size_t... Yes.


=== ztest1738025.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1738025.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1738025.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1738025 ztest1738025.c
Checking for strerror... Yes.

=== ztest1738025.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1738025.c
Checking for unistd.h... Yes.

=== ztest1738025.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1738025.c
Checking for stdarg.h... Yes.

=== ztest1738025.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1738025.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1738025.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1738025 ztest1738025.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1738025.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1738025.c
Checking for return value of vsnprintf()... Yes.

=== ztest1738025.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1738025.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:06:54 EEST 2025
=== ztest1786906.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1786906.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1786906.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1786906.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1786906.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1786906.c
Checking for size_t... Yes.


=== ztest1786906.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1786906.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1786906.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1786906 ztest1786906.c
Checking for strerror... Yes.

=== ztest1786906.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1786906.c
Checking for unistd.h... Yes.

=== ztest1786906.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1786906.c
Checking for stdarg.h... Yes.

=== ztest1786906.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1786906.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1786906.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1786906 ztest1786906.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1786906.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1786906.c
Checking for return value of vsnprintf()... Yes.

=== ztest1786906.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1786906.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:09:12 EEST 2025
=== ztest1793957.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1793957.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1793957.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1793957.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1793957.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1793957.c
Checking for size_t... Yes.


=== ztest1793957.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1793957.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1793957.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1793957 ztest1793957.c
Checking for strerror... Yes.

=== ztest1793957.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1793957.c
Checking for unistd.h... Yes.

=== ztest1793957.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1793957.c
Checking for stdarg.h... Yes.

=== ztest1793957.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1793957.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1793957.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1793957 ztest1793957.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1793957.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1793957.c
Checking for return value of vsnprintf()... Yes.

=== ztest1793957.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1793957.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:15:38 EEST 2025
=== ztest1805727.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1805727.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1805727.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1805727.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1805727.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1805727.c
Checking for size_t... Yes.


=== ztest1805727.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1805727.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1805727.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1805727 ztest1805727.c
Checking for strerror... Yes.

=== ztest1805727.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1805727.c
Checking for unistd.h... Yes.

=== ztest1805727.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1805727.c
Checking for stdarg.h... Yes.

=== ztest1805727.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1805727.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1805727.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1805727 ztest1805727.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1805727.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1805727.c
Checking for return value of vsnprintf()... Yes.

=== ztest1805727.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1805727.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:21:03 EEST 2025
=== ztest1815515.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1815515.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1815515.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1815515.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1815515.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1815515.c
Checking for size_t... Yes.


=== ztest1815515.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1815515.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1815515.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1815515 ztest1815515.c
Checking for strerror... Yes.

=== ztest1815515.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1815515.c
Checking for unistd.h... Yes.

=== ztest1815515.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1815515.c
Checking for stdarg.h... Yes.

=== ztest1815515.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1815515.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1815515.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1815515 ztest1815515.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1815515.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1815515.c
Checking for return value of vsnprintf()... Yes.

=== ztest1815515.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1815515.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:26:51 EEST 2025
=== ztest1825490.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1825490.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1825490.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1825490.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1825490.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1825490.c
Checking for size_t... Yes.


=== ztest1825490.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1825490.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1825490.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1825490 ztest1825490.c
Checking for strerror... Yes.

=== ztest1825490.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1825490.c
Checking for unistd.h... Yes.

=== ztest1825490.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1825490.c
Checking for stdarg.h... Yes.

=== ztest1825490.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1825490.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1825490.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1825490 ztest1825490.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1825490.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1825490.c
Checking for return value of vsnprintf()... Yes.

=== ztest1825490.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1825490.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:28:09 EEST 2025
=== ztest1829940.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1829940.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1829940.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1829940.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1829940.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1829940.c
Checking for size_t... Yes.


=== ztest1829940.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1829940.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1829940.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1829940 ztest1829940.c
Checking for strerror... Yes.

=== ztest1829940.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1829940.c
Checking for unistd.h... Yes.

=== ztest1829940.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1829940.c
Checking for stdarg.h... Yes.

=== ztest1829940.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1829940.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1829940.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1829940 ztest1829940.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1829940.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1829940.c
Checking for return value of vsnprintf()... Yes.

=== ztest1829940.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1829940.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:30:38 EEST 2025
=== ztest1836070.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1836070.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1836070.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1836070.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1836070.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1836070.c
Checking for size_t... Yes.


=== ztest1836070.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1836070.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1836070.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1836070 ztest1836070.c
Checking for strerror... Yes.

=== ztest1836070.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1836070.c
Checking for unistd.h... Yes.

=== ztest1836070.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1836070.c
Checking for stdarg.h... Yes.

=== ztest1836070.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1836070.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1836070.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1836070 ztest1836070.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1836070.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1836070.c
Checking for return value of vsnprintf()... Yes.

=== ztest1836070.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1836070.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:34:00 EEST 2025
=== ztest1843246.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1843246.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1843246.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1843246.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1843246.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1843246.c
Checking for size_t... Yes.


=== ztest1843246.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1843246.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1843246.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1843246 ztest1843246.c
Checking for strerror... Yes.

=== ztest1843246.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1843246.c
Checking for unistd.h... Yes.

=== ztest1843246.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1843246.c
Checking for stdarg.h... Yes.

=== ztest1843246.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1843246.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1843246.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1843246 ztest1843246.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1843246.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1843246.c
Checking for return value of vsnprintf()... Yes.

=== ztest1843246.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1843246.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:35:30 EEST 2025
=== ztest1848075.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1848075.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1848075.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1848075.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1848075.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1848075.c
Checking for size_t... Yes.


=== ztest1848075.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1848075.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1848075.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1848075 ztest1848075.c
Checking for strerror... Yes.

=== ztest1848075.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1848075.c
Checking for unistd.h... Yes.

=== ztest1848075.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1848075.c
Checking for stdarg.h... Yes.

=== ztest1848075.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1848075.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1848075.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1848075 ztest1848075.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1848075.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1848075.c
Checking for return value of vsnprintf()... Yes.

=== ztest1848075.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1848075.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:37:29 EEST 2025
=== ztest1853409.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1853409.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1853409.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1853409.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1853409.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1853409.c
Checking for size_t... Yes.


=== ztest1853409.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1853409.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1853409.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1853409 ztest1853409.c
Checking for strerror... Yes.

=== ztest1853409.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1853409.c
Checking for unistd.h... Yes.

=== ztest1853409.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1853409.c
Checking for stdarg.h... Yes.

=== ztest1853409.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1853409.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1853409.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1853409 ztest1853409.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1853409.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1853409.c
Checking for return value of vsnprintf()... Yes.

=== ztest1853409.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1853409.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:43:07 EEST 2025
=== ztest1863336.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1863336.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1863336.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1863336.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1863336.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1863336.c
Checking for size_t... Yes.


=== ztest1863336.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1863336.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1863336.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1863336 ztest1863336.c
Checking for strerror... Yes.

=== ztest1863336.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1863336.c
Checking for unistd.h... Yes.

=== ztest1863336.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1863336.c
Checking for stdarg.h... Yes.

=== ztest1863336.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1863336.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1863336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1863336 ztest1863336.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1863336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1863336.c
Checking for return value of vsnprintf()... Yes.

=== ztest1863336.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1863336.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:45:09 EEST 2025
=== ztest1868693.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1868693.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1868693.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1868693.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1868693.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1868693.c
Checking for size_t... Yes.


=== ztest1868693.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1868693.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1868693.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1868693 ztest1868693.c
Checking for strerror... Yes.

=== ztest1868693.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1868693.c
Checking for unistd.h... Yes.

=== ztest1868693.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1868693.c
Checking for stdarg.h... Yes.

=== ztest1868693.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1868693.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1868693.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1868693 ztest1868693.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1868693.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1868693.c
Checking for return value of vsnprintf()... Yes.

=== ztest1868693.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1868693.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sat May 31 22:47:44 EEST 2025
=== ztest1874856.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1874856.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1874856.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1874856.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1874856.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1874856.c
Checking for size_t... Yes.


=== ztest1874856.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1874856.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1874856.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1874856 ztest1874856.c
Checking for strerror... Yes.

=== ztest1874856.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1874856.c
Checking for unistd.h... Yes.

=== ztest1874856.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1874856.c
Checking for stdarg.h... Yes.

=== ztest1874856.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1874856.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1874856.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1874856 ztest1874856.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1874856.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1874856.c
Checking for return value of vsnprintf()... Yes.

=== ztest1874856.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1874856.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 00:15:39 EEST 2025
=== ztest1988336.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1988336.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1988336.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1988336.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1988336.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1988336.c
Checking for size_t... Yes.


=== ztest1988336.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1988336.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1988336.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1988336 ztest1988336.c
Checking for strerror... Yes.

=== ztest1988336.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1988336.c
Checking for unistd.h... Yes.

=== ztest1988336.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1988336.c
Checking for stdarg.h... Yes.

=== ztest1988336.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1988336.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1988336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1988336 ztest1988336.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1988336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1988336.c
Checking for return value of vsnprintf()... Yes.

=== ztest1988336.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1988336.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 00:17:52 EEST 2025
=== ztest1994278.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1994278.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1994278.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1994278.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1994278.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1994278.c
Checking for size_t... Yes.


=== ztest1994278.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1994278.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1994278.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1994278 ztest1994278.c
Checking for strerror... Yes.

=== ztest1994278.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1994278.c
Checking for unistd.h... Yes.

=== ztest1994278.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1994278.c
Checking for stdarg.h... Yes.

=== ztest1994278.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1994278.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1994278.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1994278 ztest1994278.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1994278.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1994278.c
Checking for return value of vsnprintf()... Yes.

=== ztest1994278.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1994278.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 00:27:34 EEST 2025
=== ztest2009402.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2009402.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2009402.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2009402.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2009402.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2009402.c
Checking for size_t... Yes.


=== ztest2009402.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2009402.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2009402.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2009402 ztest2009402.c
Checking for strerror... Yes.

=== ztest2009402.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2009402.c
Checking for unistd.h... Yes.

=== ztest2009402.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2009402.c
Checking for stdarg.h... Yes.

=== ztest2009402.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2009402.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2009402.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2009402 ztest2009402.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2009402.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2009402.c
Checking for return value of vsnprintf()... Yes.

=== ztest2009402.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2009402.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 00:28:36 EEST 2025
=== ztest2013524.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2013524.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2013524.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2013524.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2013524.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2013524.c
Checking for size_t... Yes.


=== ztest2013524.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2013524.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2013524.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2013524 ztest2013524.c
Checking for strerror... Yes.

=== ztest2013524.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2013524.c
Checking for unistd.h... Yes.

=== ztest2013524.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2013524.c
Checking for stdarg.h... Yes.

=== ztest2013524.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2013524.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2013524.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2013524 ztest2013524.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2013524.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2013524.c
Checking for return value of vsnprintf()... Yes.

=== ztest2013524.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2013524.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 01:21:37 EEST 2025
=== ztest2081665.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2081665.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2081665.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2081665.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2081665.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2081665.c
Checking for size_t... Yes.


=== ztest2081665.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2081665.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2081665.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2081665 ztest2081665.c
Checking for strerror... Yes.

=== ztest2081665.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2081665.c
Checking for unistd.h... Yes.

=== ztest2081665.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2081665.c
Checking for stdarg.h... Yes.

=== ztest2081665.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2081665.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2081665.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2081665 ztest2081665.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2081665.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2081665.c
Checking for return value of vsnprintf()... Yes.

=== ztest2081665.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2081665.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 01:23:37 EEST 2025
=== ztest2087105.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2087105.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2087105.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2087105.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2087105.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2087105.c
Checking for size_t... Yes.


=== ztest2087105.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087105.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2087105.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2087105 ztest2087105.c
Checking for strerror... Yes.

=== ztest2087105.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087105.c
Checking for unistd.h... Yes.

=== ztest2087105.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087105.c
Checking for stdarg.h... Yes.

=== ztest2087105.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087105.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2087105.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2087105 ztest2087105.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2087105.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087105.c
Checking for return value of vsnprintf()... Yes.

=== ztest2087105.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087105.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 01:35:34 EEST 2025
=== ztest2104834.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2104834.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2104834.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2104834.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2104834.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2104834.c
Checking for size_t... Yes.


=== ztest2104834.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2104834.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2104834.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2104834 ztest2104834.c
Checking for strerror... Yes.

=== ztest2104834.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2104834.c
Checking for unistd.h... Yes.

=== ztest2104834.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2104834.c
Checking for stdarg.h... Yes.

=== ztest2104834.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2104834.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2104834.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2104834 ztest2104834.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2104834.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2104834.c
Checking for return value of vsnprintf()... Yes.

=== ztest2104834.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2104834.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jun  1 01:45:20 EEST 2025
=== ztest2121875.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2121875.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2121875.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2121875.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2121875.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2121875.c
Checking for size_t... Yes.


=== ztest2121875.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2121875.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2121875.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2121875 ztest2121875.c
Checking for strerror... Yes.

=== ztest2121875.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2121875.c
Checking for unistd.h... Yes.

=== ztest2121875.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2121875.c
Checking for stdarg.h... Yes.

=== ztest2121875.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2121875.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2121875.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2121875 ztest2121875.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2121875.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2121875.c
Checking for return value of vsnprintf()... Yes.

=== ztest2121875.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2121875.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:23:33 EEST 2025
=== ztest1520163.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1520163.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1520163.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1520163.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1520163.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1520163.c
Checking for size_t... Yes.


=== ztest1520163.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1520163.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1520163.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1520163 ztest1520163.c
Checking for strerror... Yes.

=== ztest1520163.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1520163.c
Checking for unistd.h... Yes.

=== ztest1520163.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1520163.c
Checking for stdarg.h... Yes.

=== ztest1520163.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1520163.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1520163.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1520163 ztest1520163.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1520163.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1520163.c
Checking for return value of vsnprintf()... Yes.

=== ztest1520163.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1520163.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:23:51 EEST 2025
=== ztest1523966.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1523966.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1523966.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1523966.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1523966.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1523966.c
Checking for size_t... Yes.


=== ztest1523966.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1523966.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1523966.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1523966 ztest1523966.c
Checking for strerror... Yes.

=== ztest1523966.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1523966.c
Checking for unistd.h... Yes.

=== ztest1523966.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1523966.c
Checking for stdarg.h... Yes.

=== ztest1523966.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1523966.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1523966.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1523966 ztest1523966.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1523966.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1523966.c
Checking for return value of vsnprintf()... Yes.

=== ztest1523966.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1523966.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:25:47 EEST 2025
=== ztest1534245.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1534245.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1534245.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1534245.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1534245.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1534245.c
Checking for size_t... Yes.


=== ztest1534245.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1534245.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1534245.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1534245 ztest1534245.c
Checking for strerror... Yes.

=== ztest1534245.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1534245.c
Checking for unistd.h... Yes.

=== ztest1534245.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1534245.c
Checking for stdarg.h... Yes.

=== ztest1534245.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1534245.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1534245.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1534245 ztest1534245.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1534245.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1534245.c
Checking for return value of vsnprintf()... Yes.

=== ztest1534245.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1534245.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:27:53 EEST 2025
=== ztest1545008.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1545008.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1545008.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1545008.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1545008.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1545008.c
Checking for size_t... Yes.


=== ztest1545008.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1545008.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1545008.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1545008 ztest1545008.c
Checking for strerror... Yes.

=== ztest1545008.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1545008.c
Checking for unistd.h... Yes.

=== ztest1545008.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1545008.c
Checking for stdarg.h... Yes.

=== ztest1545008.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1545008.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1545008.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1545008 ztest1545008.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1545008.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1545008.c
Checking for return value of vsnprintf()... Yes.

=== ztest1545008.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1545008.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:30:42 EEST 2025
=== ztest1558367.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1558367.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1558367.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1558367.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1558367.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1558367.c
Checking for size_t... Yes.


=== ztest1558367.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1558367.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1558367.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1558367 ztest1558367.c
Checking for strerror... Yes.

=== ztest1558367.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1558367.c
Checking for unistd.h... Yes.

=== ztest1558367.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1558367.c
Checking for stdarg.h... Yes.

=== ztest1558367.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1558367.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1558367.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1558367 ztest1558367.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1558367.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1558367.c
Checking for return value of vsnprintf()... Yes.

=== ztest1558367.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1558367.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:30:59 EEST 2025
=== ztest1562273.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1562273.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1562273.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1562273.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1562273.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1562273.c
Checking for size_t... Yes.


=== ztest1562273.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1562273.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1562273.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1562273 ztest1562273.c
Checking for strerror... Yes.

=== ztest1562273.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1562273.c
Checking for unistd.h... Yes.

=== ztest1562273.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1562273.c
Checking for stdarg.h... Yes.

=== ztest1562273.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1562273.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1562273.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1562273 ztest1562273.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1562273.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1562273.c
Checking for return value of vsnprintf()... Yes.

=== ztest1562273.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1562273.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:31:27 EEST 2025
=== ztest1566702.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1566702.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1566702.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1566702.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1566702.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1566702.c
Checking for size_t... Yes.


=== ztest1566702.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1566702.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1566702.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1566702 ztest1566702.c
Checking for strerror... Yes.

=== ztest1566702.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1566702.c
Checking for unistd.h... Yes.

=== ztest1566702.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1566702.c
Checking for stdarg.h... Yes.

=== ztest1566702.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1566702.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1566702.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1566702 ztest1566702.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1566702.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1566702.c
Checking for return value of vsnprintf()... Yes.

=== ztest1566702.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1566702.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:35:20 EEST 2025
=== ztest1584015.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1584015.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1584015.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1584015.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1584015.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1584015.c
Checking for size_t... Yes.


=== ztest1584015.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1584015.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1584015.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1584015 ztest1584015.c
Checking for strerror... Yes.

=== ztest1584015.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1584015.c
Checking for unistd.h... Yes.

=== ztest1584015.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1584015.c
Checking for stdarg.h... Yes.

=== ztest1584015.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1584015.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1584015.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1584015 ztest1584015.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1584015.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1584015.c
Checking for return value of vsnprintf()... Yes.

=== ztest1584015.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1584015.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:37:25 EEST 2025
=== ztest1594585.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1594585.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1594585.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1594585.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1594585.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1594585.c
Checking for size_t... Yes.


=== ztest1594585.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1594585.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1594585.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1594585 ztest1594585.c
Checking for strerror... Yes.

=== ztest1594585.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1594585.c
Checking for unistd.h... Yes.

=== ztest1594585.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1594585.c
Checking for stdarg.h... Yes.

=== ztest1594585.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1594585.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1594585.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1594585 ztest1594585.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1594585.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1594585.c
Checking for return value of vsnprintf()... Yes.

=== ztest1594585.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1594585.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:38:54 EEST 2025
=== ztest1602893.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1602893.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1602893.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1602893.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1602893.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1602893.c
Checking for size_t... Yes.


=== ztest1602893.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1602893.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1602893.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1602893 ztest1602893.c
Checking for strerror... Yes.

=== ztest1602893.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1602893.c
Checking for unistd.h... Yes.

=== ztest1602893.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1602893.c
Checking for stdarg.h... Yes.

=== ztest1602893.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1602893.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1602893.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1602893 ztest1602893.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1602893.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1602893.c
Checking for return value of vsnprintf()... Yes.

=== ztest1602893.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1602893.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:41:28 EEST 2025
=== ztest1614989.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1614989.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1614989.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1614989.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1614989.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1614989.c
Checking for size_t... Yes.


=== ztest1614989.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1614989.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1614989.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1614989 ztest1614989.c
Checking for strerror... Yes.

=== ztest1614989.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1614989.c
Checking for unistd.h... Yes.

=== ztest1614989.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1614989.c
Checking for stdarg.h... Yes.

=== ztest1614989.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1614989.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1614989.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1614989 ztest1614989.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1614989.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1614989.c
Checking for return value of vsnprintf()... Yes.

=== ztest1614989.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1614989.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:42:06 EEST 2025
=== ztest1619979.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1619979.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1619979.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1619979.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1619979.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1619979.c
Checking for size_t... Yes.


=== ztest1619979.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1619979.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1619979.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1619979 ztest1619979.c
Checking for strerror... Yes.

=== ztest1619979.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1619979.c
Checking for unistd.h... Yes.

=== ztest1619979.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1619979.c
Checking for stdarg.h... Yes.

=== ztest1619979.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1619979.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1619979.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1619979 ztest1619979.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1619979.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1619979.c
Checking for return value of vsnprintf()... Yes.

=== ztest1619979.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1619979.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:43:41 EEST 2025
=== ztest1628710.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1628710.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1628710.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1628710.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1628710.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1628710.c
Checking for size_t... Yes.


=== ztest1628710.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1628710.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1628710.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1628710 ztest1628710.c
Checking for strerror... Yes.

=== ztest1628710.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1628710.c
Checking for unistd.h... Yes.

=== ztest1628710.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1628710.c
Checking for stdarg.h... Yes.

=== ztest1628710.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1628710.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1628710.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1628710 ztest1628710.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1628710.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1628710.c
Checking for return value of vsnprintf()... Yes.

=== ztest1628710.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1628710.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 20:45:42 EEST 2025
=== ztest1639148.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1639148.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1639148.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1639148.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1639148.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1639148.c
Checking for size_t... Yes.


=== ztest1639148.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1639148.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1639148.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1639148 ztest1639148.c
Checking for strerror... Yes.

=== ztest1639148.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1639148.c
Checking for unistd.h... Yes.

=== ztest1639148.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1639148.c
Checking for stdarg.h... Yes.

=== ztest1639148.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1639148.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1639148.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1639148 ztest1639148.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1639148.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1639148.c
Checking for return value of vsnprintf()... Yes.

=== ztest1639148.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1639148.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 21:05:08 EEST 2025
=== ztest1710781.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1710781.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1710781.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1710781.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1710781.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1710781.c
Checking for size_t... Yes.


=== ztest1710781.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1710781.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1710781.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1710781 ztest1710781.c
Checking for strerror... Yes.

=== ztest1710781.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1710781.c
Checking for unistd.h... Yes.

=== ztest1710781.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1710781.c
Checking for stdarg.h... Yes.

=== ztest1710781.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1710781.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1710781.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1710781 ztest1710781.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1710781.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1710781.c
Checking for return value of vsnprintf()... Yes.

=== ztest1710781.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1710781.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 21:11:00 EEST 2025
=== ztest1734947.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1734947.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1734947.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1734947.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1734947.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1734947.c
Checking for size_t... Yes.


=== ztest1734947.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1734947.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1734947.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1734947 ztest1734947.c
Checking for strerror... Yes.

=== ztest1734947.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1734947.c
Checking for unistd.h... Yes.

=== ztest1734947.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1734947.c
Checking for stdarg.h... Yes.

=== ztest1734947.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1734947.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1734947.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1734947 ztest1734947.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1734947.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1734947.c
Checking for return value of vsnprintf()... Yes.

=== ztest1734947.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1734947.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 21:12:07 EEST 2025
=== ztest1741755.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1741755.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1741755.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1741755.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1741755.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1741755.c
Checking for size_t... Yes.


=== ztest1741755.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1741755.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1741755.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1741755 ztest1741755.c
Checking for strerror... Yes.

=== ztest1741755.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1741755.c
Checking for unistd.h... Yes.

=== ztest1741755.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1741755.c
Checking for stdarg.h... Yes.

=== ztest1741755.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1741755.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1741755.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1741755 ztest1741755.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1741755.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1741755.c
Checking for return value of vsnprintf()... Yes.

=== ztest1741755.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1741755.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 21:27:16 EEST 2025
=== ztest1799418.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1799418.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1799418.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1799418.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1799418.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1799418.c
Checking for size_t... Yes.


=== ztest1799418.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1799418.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1799418.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1799418 ztest1799418.c
Checking for strerror... Yes.

=== ztest1799418.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1799418.c
Checking for unistd.h... Yes.

=== ztest1799418.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1799418.c
Checking for stdarg.h... Yes.

=== ztest1799418.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1799418.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1799418.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1799418 ztest1799418.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1799418.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1799418.c
Checking for return value of vsnprintf()... Yes.

=== ztest1799418.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1799418.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 21:30:13 EEST 2025
=== ztest1813047.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1813047.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1813047.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1813047.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1813047.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1813047.c
Checking for size_t... Yes.


=== ztest1813047.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1813047.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1813047.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1813047 ztest1813047.c
Checking for strerror... Yes.

=== ztest1813047.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1813047.c
Checking for unistd.h... Yes.

=== ztest1813047.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1813047.c
Checking for stdarg.h... Yes.

=== ztest1813047.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1813047.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1813047.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1813047 ztest1813047.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1813047.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1813047.c
Checking for return value of vsnprintf()... Yes.

=== ztest1813047.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1813047.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun  3 21:40:49 EEST 2025
=== ztest1854688.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1854688.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1854688.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1854688.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1854688.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1854688.c
Checking for size_t... Yes.


=== ztest1854688.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1854688.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1854688.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1854688 ztest1854688.c
Checking for strerror... Yes.

=== ztest1854688.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1854688.c
Checking for unistd.h... Yes.

=== ztest1854688.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1854688.c
Checking for stdarg.h... Yes.

=== ztest1854688.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1854688.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1854688.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1854688 ztest1854688.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1854688.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1854688.c
Checking for return value of vsnprintf()... Yes.

=== ztest1854688.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1854688.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Jun 24 23:05:15 EEST 2025
=== ztest102093.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest102093.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest102093.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest102093.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest102093.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest102093.c
Checking for size_t... Yes.


=== ztest102093.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest102093.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest102093.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest102093 ztest102093.c
Checking for strerror... Yes.

=== ztest102093.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest102093.c
Checking for unistd.h... Yes.

=== ztest102093.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest102093.c
Checking for stdarg.h... Yes.

=== ztest102093.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest102093.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest102093.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest102093 ztest102093.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest102093.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest102093.c
Checking for return value of vsnprintf()... Yes.

=== ztest102093.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest102093.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed Jun 25 21:07:10 EEST 2025
=== ztest3454079.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3454079.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3454079.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3454079.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3454079.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3454079.c
Checking for size_t... Yes.


=== ztest3454079.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3454079.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3454079.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3454079 ztest3454079.c
Checking for strerror... Yes.

=== ztest3454079.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3454079.c
Checking for unistd.h... Yes.

=== ztest3454079.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3454079.c
Checking for stdarg.h... Yes.

=== ztest3454079.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3454079.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3454079.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3454079 ztest3454079.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3454079.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3454079.c
Checking for return value of vsnprintf()... Yes.

=== ztest3454079.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3454079.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed Jun 25 22:06:15 EEST 2025
=== ztest3593077.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3593077.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3593077.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3593077.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3593077.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3593077.c
Checking for size_t... Yes.


=== ztest3593077.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3593077.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3593077.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3593077 ztest3593077.c
Checking for strerror... Yes.

=== ztest3593077.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3593077.c
Checking for unistd.h... Yes.

=== ztest3593077.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3593077.c
Checking for stdarg.h... Yes.

=== ztest3593077.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3593077.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3593077.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3593077 ztest3593077.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3593077.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3593077.c
Checking for return value of vsnprintf()... Yes.

=== ztest3593077.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3593077.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed Jul  2 13:34:42 EEST 2025
=== ztest290382.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest290382.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest290382.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest290382.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest290382.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest290382.c
Checking for size_t... Yes.


=== ztest290382.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest290382.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest290382.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest290382 ztest290382.c
Checking for strerror... Yes.

=== ztest290382.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest290382.c
Checking for unistd.h... Yes.

=== ztest290382.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest290382.c
Checking for stdarg.h... Yes.

=== ztest290382.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest290382.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest290382.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest290382 ztest290382.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest290382.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest290382.c
Checking for return value of vsnprintf()... Yes.

=== ztest290382.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest290382.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed Jul  2 13:40:58 EEST 2025
=== ztest309517.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest309517.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest309517.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest309517.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest309517.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest309517.c
Checking for size_t... Yes.


=== ztest309517.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest309517.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest309517.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest309517 ztest309517.c
Checking for strerror... Yes.

=== ztest309517.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest309517.c
Checking for unistd.h... Yes.

=== ztest309517.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest309517.c
Checking for stdarg.h... Yes.

=== ztest309517.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest309517.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest309517.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest309517 ztest309517.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest309517.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest309517.c
Checking for return value of vsnprintf()... Yes.

=== ztest309517.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest309517.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed Jul  2 18:05:19 EEST 2025
=== ztest565220.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest565220.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest565220.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest565220.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest565220.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest565220.c
Checking for size_t... Yes.


=== ztest565220.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest565220.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest565220.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest565220 ztest565220.c
Checking for strerror... Yes.

=== ztest565220.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest565220.c
Checking for unistd.h... Yes.

=== ztest565220.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest565220.c
Checking for stdarg.h... Yes.

=== ztest565220.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest565220.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest565220.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest565220 ztest565220.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest565220.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest565220.c
Checking for return value of vsnprintf()... Yes.

=== ztest565220.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest565220.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 20:16:56 EEST 2025
=== ztest1377241.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1377241.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1377241.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1377241.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1377241.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1377241.c
Checking for size_t... Yes.


=== ztest1377241.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1377241.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1377241.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1377241 ztest1377241.c
Checking for strerror... Yes.

=== ztest1377241.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1377241.c
Checking for unistd.h... Yes.

=== ztest1377241.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1377241.c
Checking for stdarg.h... Yes.

=== ztest1377241.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1377241.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1377241.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1377241 ztest1377241.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1377241.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1377241.c
Checking for return value of vsnprintf()... Yes.

=== ztest1377241.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1377241.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 21:30:20 EEST 2025
=== ztest1629666.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1629666.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1629666.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1629666.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1629666.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1629666.c
Checking for size_t... Yes.


=== ztest1629666.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1629666.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1629666.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1629666 ztest1629666.c
Checking for strerror... Yes.

=== ztest1629666.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1629666.c
Checking for unistd.h... Yes.

=== ztest1629666.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1629666.c
Checking for stdarg.h... Yes.

=== ztest1629666.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1629666.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1629666.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1629666 ztest1629666.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1629666.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1629666.c
Checking for return value of vsnprintf()... Yes.

=== ztest1629666.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1629666.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 22:46:56 EEST 2025
=== ztest1886253.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1886253.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1886253.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1886253.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1886253.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1886253.c
Checking for size_t... Yes.


=== ztest1886253.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1886253.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1886253.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1886253 ztest1886253.c
Checking for strerror... Yes.

=== ztest1886253.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1886253.c
Checking for unistd.h... Yes.

=== ztest1886253.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1886253.c
Checking for stdarg.h... Yes.

=== ztest1886253.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1886253.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1886253.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1886253 ztest1886253.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1886253.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1886253.c
Checking for return value of vsnprintf()... Yes.

=== ztest1886253.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1886253.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 23:37:46 EEST 2025
=== ztest2038014.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2038014.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2038014.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2038014.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2038014.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2038014.c
Checking for size_t... Yes.


=== ztest2038014.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2038014.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2038014.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2038014 ztest2038014.c
Checking for strerror... Yes.

=== ztest2038014.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2038014.c
Checking for unistd.h... Yes.

=== ztest2038014.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2038014.c
Checking for stdarg.h... Yes.

=== ztest2038014.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2038014.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2038014.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2038014 ztest2038014.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2038014.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2038014.c
Checking for return value of vsnprintf()... Yes.

=== ztest2038014.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2038014.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 23:38:30 EEST 2025
=== ztest2042937.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2042937.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2042937.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2042937.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2042937.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2042937.c
Checking for size_t... Yes.


=== ztest2042937.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2042937.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2042937.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2042937 ztest2042937.c
Checking for strerror... Yes.

=== ztest2042937.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2042937.c
Checking for unistd.h... Yes.

=== ztest2042937.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2042937.c
Checking for stdarg.h... Yes.

=== ztest2042937.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2042937.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2042937.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2042937 ztest2042937.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2042937.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2042937.c
Checking for return value of vsnprintf()... Yes.

=== ztest2042937.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2042937.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 23:40:34 EEST 2025
=== ztest2052020.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2052020.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2052020.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2052020.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2052020.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2052020.c
Checking for size_t... Yes.


=== ztest2052020.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2052020.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2052020.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2052020 ztest2052020.c
Checking for strerror... Yes.

=== ztest2052020.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2052020.c
Checking for unistd.h... Yes.

=== ztest2052020.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2052020.c
Checking for stdarg.h... Yes.

=== ztest2052020.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2052020.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2052020.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2052020 ztest2052020.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2052020.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2052020.c
Checking for return value of vsnprintf()... Yes.

=== ztest2052020.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2052020.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 23:41:15 EEST 2025
=== ztest2056654.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2056654.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2056654.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2056654.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2056654.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2056654.c
Checking for size_t... Yes.


=== ztest2056654.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2056654.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2056654.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2056654 ztest2056654.c
Checking for strerror... Yes.

=== ztest2056654.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2056654.c
Checking for unistd.h... Yes.

=== ztest2056654.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2056654.c
Checking for stdarg.h... Yes.

=== ztest2056654.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2056654.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2056654.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2056654 ztest2056654.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2056654.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2056654.c
Checking for return value of vsnprintf()... Yes.

=== ztest2056654.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2056654.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 23:42:23 EEST 2025
=== ztest2062855.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2062855.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2062855.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2062855.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2062855.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2062855.c
Checking for size_t... Yes.


=== ztest2062855.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2062855.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2062855.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2062855 ztest2062855.c
Checking for strerror... Yes.

=== ztest2062855.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2062855.c
Checking for unistd.h... Yes.

=== ztest2062855.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2062855.c
Checking for stdarg.h... Yes.

=== ztest2062855.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2062855.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2062855.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2062855 ztest2062855.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2062855.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2062855.c
Checking for return value of vsnprintf()... Yes.

=== ztest2062855.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2062855.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Sun Jul  6 23:49:47 EEST 2025
=== ztest2087415.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2087415.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2087415.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2087415.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2087415.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2087415.c
Checking for size_t... Yes.


=== ztest2087415.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087415.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2087415.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2087415 ztest2087415.c
Checking for strerror... Yes.

=== ztest2087415.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087415.c
Checking for unistd.h... Yes.

=== ztest2087415.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087415.c
Checking for stdarg.h... Yes.

=== ztest2087415.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087415.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2087415.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2087415 ztest2087415.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2087415.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087415.c
Checking for return value of vsnprintf()... Yes.

=== ztest2087415.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2087415.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 09:51:09 μμ EEST
=== ztest2114516.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2114516.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2114516.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2114516.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2114516.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2114516.c
Checking for size_t... Yes.


=== ztest2114516.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2114516.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2114516.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2114516 ztest2114516.c
Checking for strerror... Yes.

=== ztest2114516.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2114516.c
Checking for unistd.h... Yes.

=== ztest2114516.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2114516.c
Checking for stdarg.h... Yes.

=== ztest2114516.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2114516.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2114516.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2114516 ztest2114516.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2114516.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2114516.c
Checking for return value of vsnprintf()... Yes.

=== ztest2114516.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2114516.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 09:52:21 μμ EEST
=== ztest2118770.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2118770.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2118770.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2118770.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2118770.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2118770.c
Checking for size_t... Yes.


=== ztest2118770.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2118770.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2118770.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2118770 ztest2118770.c
Checking for strerror... Yes.

=== ztest2118770.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2118770.c
Checking for unistd.h... Yes.

=== ztest2118770.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2118770.c
Checking for stdarg.h... Yes.

=== ztest2118770.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2118770.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2118770.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2118770 ztest2118770.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2118770.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2118770.c
Checking for return value of vsnprintf()... Yes.

=== ztest2118770.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2118770.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 10:21:03 μμ EEST
=== ztest2125643.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2125643.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2125643.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2125643.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2125643.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2125643.c
Checking for size_t... Yes.


=== ztest2125643.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2125643.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2125643.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2125643 ztest2125643.c
Checking for strerror... Yes.

=== ztest2125643.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2125643.c
Checking for unistd.h... Yes.

=== ztest2125643.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2125643.c
Checking for stdarg.h... Yes.

=== ztest2125643.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2125643.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2125643.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2125643 ztest2125643.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2125643.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2125643.c
Checking for return value of vsnprintf()... Yes.

=== ztest2125643.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2125643.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 10:22:00 μμ EEST
=== ztest2129531.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2129531.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2129531.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2129531.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2129531.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2129531.c
Checking for size_t... Yes.


=== ztest2129531.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2129531.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2129531.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2129531 ztest2129531.c
Checking for strerror... Yes.

=== ztest2129531.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2129531.c
Checking for unistd.h... Yes.

=== ztest2129531.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2129531.c
Checking for stdarg.h... Yes.

=== ztest2129531.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2129531.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2129531.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2129531 ztest2129531.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2129531.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2129531.c
Checking for return value of vsnprintf()... Yes.

=== ztest2129531.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2129531.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 10:22:23 μμ EEST
=== ztest2133349.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2133349.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2133349.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2133349.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2133349.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2133349.c
Checking for size_t... Yes.


=== ztest2133349.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2133349.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2133349.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2133349 ztest2133349.c
Checking for strerror... Yes.

=== ztest2133349.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2133349.c
Checking for unistd.h... Yes.

=== ztest2133349.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2133349.c
Checking for stdarg.h... Yes.

=== ztest2133349.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2133349.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2133349.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2133349 ztest2133349.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2133349.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2133349.c
Checking for return value of vsnprintf()... Yes.

=== ztest2133349.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2133349.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 11:41:39 μμ EEST
=== ztest2152603.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2152603.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2152603.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2152603.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2152603.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2152603.c
Checking for size_t... Yes.


=== ztest2152603.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2152603.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2152603.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2152603 ztest2152603.c
Checking for strerror... Yes.

=== ztest2152603.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2152603.c
Checking for unistd.h... Yes.

=== ztest2152603.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2152603.c
Checking for stdarg.h... Yes.

=== ztest2152603.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2152603.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2152603.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2152603 ztest2152603.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2152603.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2152603.c
Checking for return value of vsnprintf()... Yes.

=== ztest2152603.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2152603.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Δευ 07 Ιουλ 2025 11:43:06 μμ EEST
=== ztest2157293.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2157293.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2157293.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2157293.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2157293.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2157293.c
Checking for size_t... Yes.


=== ztest2157293.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2157293.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2157293.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2157293 ztest2157293.c
Checking for strerror... Yes.

=== ztest2157293.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2157293.c
Checking for unistd.h... Yes.

=== ztest2157293.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2157293.c
Checking for stdarg.h... Yes.

=== ztest2157293.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2157293.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2157293.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2157293 ztest2157293.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2157293.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2157293.c
Checking for return value of vsnprintf()... Yes.

=== ztest2157293.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2157293.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Τετ 09 Ιουλ 2025 08:20:25 μμ EEST
=== ztest2407505.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2407505.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2407505.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2407505.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2407505.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2407505.c
Checking for size_t... Yes.


=== ztest2407505.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2407505.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2407505.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2407505 ztest2407505.c
Checking for strerror... Yes.

=== ztest2407505.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2407505.c
Checking for unistd.h... Yes.

=== ztest2407505.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2407505.c
Checking for stdarg.h... Yes.

=== ztest2407505.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2407505.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2407505.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2407505 ztest2407505.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2407505.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2407505.c
Checking for return value of vsnprintf()... Yes.

=== ztest2407505.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2407505.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu Jul 10 14:38:23 EEST 2025
=== ztest2864542.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2864542.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2864542.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2864542.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2864542.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2864542.c
Checking for size_t... Yes.


=== ztest2864542.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2864542.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2864542.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2864542 ztest2864542.c
Checking for strerror... Yes.

=== ztest2864542.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2864542.c
Checking for unistd.h... Yes.

=== ztest2864542.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2864542.c
Checking for stdarg.h... Yes.

=== ztest2864542.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2864542.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2864542.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2864542 ztest2864542.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2864542.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2864542.c
Checking for return value of vsnprintf()... Yes.

=== ztest2864542.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2864542.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu Jul 10 14:49:27 EEST 2025
=== ztest3050184.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3050184.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3050184.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3050184.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3050184.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3050184.c
Checking for size_t... Yes.


=== ztest3050184.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3050184.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3050184.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3050184 ztest3050184.c
Checking for strerror... Yes.

=== ztest3050184.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3050184.c
Checking for unistd.h... Yes.

=== ztest3050184.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3050184.c
Checking for stdarg.h... Yes.

=== ztest3050184.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3050184.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3050184.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3050184 ztest3050184.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3050184.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3050184.c
Checking for return value of vsnprintf()... Yes.

=== ztest3050184.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3050184.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu Jul 10 14:54:11 EEST 2025
=== ztest3079400.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3079400.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3079400.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3079400.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3079400.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3079400.c
Checking for size_t... Yes.


=== ztest3079400.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3079400.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3079400.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3079400 ztest3079400.c
Checking for strerror... Yes.

=== ztest3079400.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3079400.c
Checking for unistd.h... Yes.

=== ztest3079400.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3079400.c
Checking for stdarg.h... Yes.

=== ztest3079400.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3079400.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3079400.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3079400 ztest3079400.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3079400.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3079400.c
Checking for return value of vsnprintf()... Yes.

=== ztest3079400.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3079400.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 07:48:03 μμ EEST
=== ztest2645630.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2645630.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2645630.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2645630.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2645630.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2645630.c
Checking for size_t... Yes.


=== ztest2645630.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2645630.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2645630.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2645630 ztest2645630.c
Checking for strerror... Yes.

=== ztest2645630.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2645630.c
Checking for unistd.h... Yes.

=== ztest2645630.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2645630.c
Checking for stdarg.h... Yes.

=== ztest2645630.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2645630.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2645630.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2645630 ztest2645630.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2645630.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2645630.c
Checking for return value of vsnprintf()... Yes.

=== ztest2645630.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2645630.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 07:50:20 μμ EEST
=== ztest2649409.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2649409.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2649409.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2649409.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2649409.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2649409.c
Checking for size_t... Yes.


=== ztest2649409.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2649409.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2649409.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2649409 ztest2649409.c
Checking for strerror... Yes.

=== ztest2649409.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2649409.c
Checking for unistd.h... Yes.

=== ztest2649409.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2649409.c
Checking for stdarg.h... Yes.

=== ztest2649409.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2649409.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2649409.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2649409 ztest2649409.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2649409.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2649409.c
Checking for return value of vsnprintf()... Yes.

=== ztest2649409.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2649409.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 08:11:05 μμ EEST
=== ztest2658615.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2658615.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2658615.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2658615.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2658615.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2658615.c
Checking for size_t... Yes.


=== ztest2658615.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2658615.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2658615.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2658615 ztest2658615.c
Checking for strerror... Yes.

=== ztest2658615.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2658615.c
Checking for unistd.h... Yes.

=== ztest2658615.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2658615.c
Checking for stdarg.h... Yes.

=== ztest2658615.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2658615.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2658615.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2658615 ztest2658615.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2658615.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2658615.c
Checking for return value of vsnprintf()... Yes.

=== ztest2658615.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2658615.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 09:38:10 μμ EEST
=== ztest2679117.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2679117.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2679117.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2679117.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2679117.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2679117.c
Checking for size_t... Yes.


=== ztest2679117.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2679117.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2679117.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2679117 ztest2679117.c
Checking for strerror... Yes.

=== ztest2679117.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2679117.c
Checking for unistd.h... Yes.

=== ztest2679117.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2679117.c
Checking for stdarg.h... Yes.

=== ztest2679117.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2679117.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2679117.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2679117 ztest2679117.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2679117.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2679117.c
Checking for return value of vsnprintf()... Yes.

=== ztest2679117.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2679117.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 09:58:26 μμ EEST
=== ztest2685479.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2685479.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2685479.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2685479.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2685479.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2685479.c
Checking for size_t... Yes.


=== ztest2685479.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2685479.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2685479.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2685479 ztest2685479.c
Checking for strerror... Yes.

=== ztest2685479.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2685479.c
Checking for unistd.h... Yes.

=== ztest2685479.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2685479.c
Checking for stdarg.h... Yes.

=== ztest2685479.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2685479.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2685479.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2685479 ztest2685479.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2685479.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2685479.c
Checking for return value of vsnprintf()... Yes.

=== ztest2685479.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2685479.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 10:34:11 μμ EEST
=== ztest2692327.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2692327.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2692327.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2692327.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2692327.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2692327.c
Checking for size_t... Yes.


=== ztest2692327.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2692327.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2692327.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2692327 ztest2692327.c
Checking for strerror... Yes.

=== ztest2692327.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2692327.c
Checking for unistd.h... Yes.

=== ztest2692327.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2692327.c
Checking for stdarg.h... Yes.

=== ztest2692327.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2692327.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2692327.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2692327 ztest2692327.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2692327.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2692327.c
Checking for return value of vsnprintf()... Yes.

=== ztest2692327.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2692327.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 10:38:06 μμ EEST
=== ztest2697492.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2697492.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2697492.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2697492.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2697492.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2697492.c
Checking for size_t... Yes.


=== ztest2697492.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2697492.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2697492.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2697492 ztest2697492.c
Checking for strerror... Yes.

=== ztest2697492.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2697492.c
Checking for unistd.h... Yes.

=== ztest2697492.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2697492.c
Checking for stdarg.h... Yes.

=== ztest2697492.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2697492.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2697492.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2697492 ztest2697492.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2697492.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2697492.c
Checking for return value of vsnprintf()... Yes.

=== ztest2697492.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2697492.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 10:46:00 μμ EEST
=== ztest2701882.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2701882.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2701882.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2701882.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2701882.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2701882.c
Checking for size_t... Yes.


=== ztest2701882.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2701882.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2701882.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2701882 ztest2701882.c
Checking for strerror... Yes.

=== ztest2701882.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2701882.c
Checking for unistd.h... Yes.

=== ztest2701882.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2701882.c
Checking for stdarg.h... Yes.

=== ztest2701882.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2701882.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2701882.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2701882 ztest2701882.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2701882.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2701882.c
Checking for return value of vsnprintf()... Yes.

=== ztest2701882.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2701882.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 10:51:04 μμ EEST
=== ztest2707100.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2707100.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2707100.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2707100.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2707100.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2707100.c
Checking for size_t... Yes.


=== ztest2707100.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2707100.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2707100.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2707100 ztest2707100.c
Checking for strerror... Yes.

=== ztest2707100.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2707100.c
Checking for unistd.h... Yes.

=== ztest2707100.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2707100.c
Checking for stdarg.h... Yes.

=== ztest2707100.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2707100.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2707100.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2707100 ztest2707100.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2707100.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2707100.c
Checking for return value of vsnprintf()... Yes.

=== ztest2707100.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2707100.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Παρ 11 Ιουλ 2025 11:01:02 μμ EEST
=== ztest2713263.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2713263.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2713263.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2713263.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2713263.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2713263.c
Checking for size_t... Yes.


=== ztest2713263.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2713263.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2713263.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2713263 ztest2713263.c
Checking for strerror... Yes.

=== ztest2713263.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2713263.c
Checking for unistd.h... Yes.

=== ztest2713263.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2713263.c
Checking for stdarg.h... Yes.

=== ztest2713263.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2713263.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2713263.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2713263 ztest2713263.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2713263.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2713263.c
Checking for return value of vsnprintf()... Yes.

=== ztest2713263.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2713263.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 12:34:33 πμ EEST
=== ztest2734617.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2734617.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2734617.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2734617.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2734617.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2734617.c
Checking for size_t... Yes.


=== ztest2734617.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2734617.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2734617.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2734617 ztest2734617.c
Checking for strerror... Yes.

=== ztest2734617.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2734617.c
Checking for unistd.h... Yes.

=== ztest2734617.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2734617.c
Checking for stdarg.h... Yes.

=== ztest2734617.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2734617.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2734617.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2734617 ztest2734617.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2734617.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2734617.c
Checking for return value of vsnprintf()... Yes.

=== ztest2734617.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2734617.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 12:38:52 πμ EEST
=== ztest2739924.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2739924.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2739924.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2739924.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2739924.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2739924.c
Checking for size_t... Yes.


=== ztest2739924.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2739924.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2739924.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2739924 ztest2739924.c
Checking for strerror... Yes.

=== ztest2739924.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2739924.c
Checking for unistd.h... Yes.

=== ztest2739924.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2739924.c
Checking for stdarg.h... Yes.

=== ztest2739924.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2739924.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2739924.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2739924 ztest2739924.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2739924.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2739924.c
Checking for return value of vsnprintf()... Yes.

=== ztest2739924.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2739924.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 12:40:57 πμ EEST
=== ztest2745003.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2745003.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2745003.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2745003.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2745003.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2745003.c
Checking for size_t... Yes.


=== ztest2745003.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2745003.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2745003.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2745003 ztest2745003.c
Checking for strerror... Yes.

=== ztest2745003.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2745003.c
Checking for unistd.h... Yes.

=== ztest2745003.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2745003.c
Checking for stdarg.h... Yes.

=== ztest2745003.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2745003.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2745003.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2745003 ztest2745003.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2745003.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2745003.c
Checking for return value of vsnprintf()... Yes.

=== ztest2745003.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2745003.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 12:42:43 πμ EEST
=== ztest2750042.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2750042.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2750042.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2750042.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2750042.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2750042.c
Checking for size_t... Yes.


=== ztest2750042.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2750042.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2750042.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2750042 ztest2750042.c
Checking for strerror... Yes.

=== ztest2750042.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2750042.c
Checking for unistd.h... Yes.

=== ztest2750042.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2750042.c
Checking for stdarg.h... Yes.

=== ztest2750042.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2750042.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2750042.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2750042 ztest2750042.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2750042.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2750042.c
Checking for return value of vsnprintf()... Yes.

=== ztest2750042.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2750042.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 02:48:12 πμ EEST
=== ztest2777184.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2777184.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2777184.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2777184.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2777184.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2777184.c
Checking for size_t... Yes.


=== ztest2777184.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2777184.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2777184.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2777184 ztest2777184.c
Checking for strerror... Yes.

=== ztest2777184.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2777184.c
Checking for unistd.h... Yes.

=== ztest2777184.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2777184.c
Checking for stdarg.h... Yes.

=== ztest2777184.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2777184.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2777184.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2777184 ztest2777184.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2777184.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2777184.c
Checking for return value of vsnprintf()... Yes.

=== ztest2777184.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2777184.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 02:50:14 πμ EEST
=== ztest2782225.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2782225.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2782225.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2782225.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2782225.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2782225.c
Checking for size_t... Yes.


=== ztest2782225.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2782225.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2782225.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2782225 ztest2782225.c
Checking for strerror... Yes.

=== ztest2782225.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2782225.c
Checking for unistd.h... Yes.

=== ztest2782225.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2782225.c
Checking for stdarg.h... Yes.

=== ztest2782225.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2782225.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2782225.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2782225 ztest2782225.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2782225.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2782225.c
Checking for return value of vsnprintf()... Yes.

=== ztest2782225.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2782225.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Σαβ 12 Ιουλ 2025 02:58:41 πμ EEST
=== ztest2786418.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2786418.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2786418.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2786418.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2786418.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2786418.c
Checking for size_t... Yes.


=== ztest2786418.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2786418.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2786418.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2786418 ztest2786418.c
Checking for strerror... Yes.

=== ztest2786418.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2786418.c
Checking for unistd.h... Yes.

=== ztest2786418.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2786418.c
Checking for stdarg.h... Yes.

=== ztest2786418.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2786418.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2786418.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2786418 ztest2786418.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2786418.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2786418.c
Checking for return value of vsnprintf()... Yes.

=== ztest2786418.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2786418.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue Aug 19 00:19:12 EEST 2025
=== ztest2747388.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest2747388.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest2747388.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest2747388.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest2747388.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest2747388.c
Checking for size_t... Yes.


=== ztest2747388.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2747388.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest2747388.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2747388 ztest2747388.c
Checking for strerror... Yes.

=== ztest2747388.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2747388.c
Checking for unistd.h... Yes.

=== ztest2747388.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2747388.c
Checking for stdarg.h... Yes.

=== ztest2747388.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2747388.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest2747388.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest2747388 ztest2747388.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest2747388.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2747388.c
Checking for return value of vsnprintf()... Yes.

=== ztest2747388.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest2747388.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


