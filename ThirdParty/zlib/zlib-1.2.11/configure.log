--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Wed May 14 21:51:36 EEST 2025
=== ztest3677874.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3677874.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3677874.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3677874.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3677874.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3677874.c
Checking for size_t... Yes.


=== ztest3677874.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3677874.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3677874 ztest3677874.c
Checking for strerror... Yes.

=== ztest3677874.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for unistd.h... Yes.

=== ztest3677874.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for stdarg.h... Yes.

=== ztest3677874.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3677874.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3677874 ztest3677874.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3677874.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for return value of vsnprintf()... Yes.

=== ztest3677874.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3677874.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 22:54:07 EEST 2025
=== ztest1451336.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1451336.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1451336.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1451336.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1451336.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1451336.c
Checking for size_t... Yes.


=== ztest1451336.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1451336.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1451336 ztest1451336.c
Checking for strerror... Yes.

=== ztest1451336.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for unistd.h... Yes.

=== ztest1451336.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for stdarg.h... Yes.

=== ztest1451336.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1451336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1451336 ztest1451336.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1451336.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for return value of vsnprintf()... Yes.

=== ztest1451336.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1451336.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:00:37 EEST 2025
=== ztest1464781.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1464781.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1464781.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1464781.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1464781.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1464781.c
Checking for size_t... Yes.


=== ztest1464781.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1464781.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1464781 ztest1464781.c
Checking for strerror... Yes.

=== ztest1464781.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for unistd.h... Yes.

=== ztest1464781.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for stdarg.h... Yes.

=== ztest1464781.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1464781.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1464781 ztest1464781.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1464781.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for return value of vsnprintf()... Yes.

=== ztest1464781.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1464781.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:02:21 EEST 2025
=== ztest1469617.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1469617.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1469617.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1469617.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1469617.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1469617.c
Checking for size_t... Yes.


=== ztest1469617.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1469617.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1469617 ztest1469617.c
Checking for strerror... Yes.

=== ztest1469617.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for unistd.h... Yes.

=== ztest1469617.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for stdarg.h... Yes.

=== ztest1469617.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1469617.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1469617 ztest1469617.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1469617.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for return value of vsnprintf()... Yes.

=== ztest1469617.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1469617.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:02:46 EEST 2025
=== ztest1472847.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1472847.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1472847.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1472847.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1472847.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1472847.c
Checking for size_t... Yes.


=== ztest1472847.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1472847.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1472847 ztest1472847.c
Checking for strerror... Yes.

=== ztest1472847.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for unistd.h... Yes.

=== ztest1472847.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for stdarg.h... Yes.

=== ztest1472847.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1472847.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1472847 ztest1472847.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1472847.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for return value of vsnprintf()... Yes.

=== ztest1472847.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1472847.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Thu May 15 23:04:09 EEST 2025
=== ztest1477280.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1477280.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1477280.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1477280.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1477280.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1477280.c
Checking for size_t... Yes.


=== ztest1477280.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1477280.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1477280 ztest1477280.c
Checking for strerror... Yes.

=== ztest1477280.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for unistd.h... Yes.

=== ztest1477280.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for stdarg.h... Yes.

=== ztest1477280.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1477280.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1477280 ztest1477280.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1477280.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for return value of vsnprintf()... Yes.

=== ztest1477280.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1477280.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 22:29:12 EEST 2025
=== ztest3900345.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3900345.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3900345.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3900345.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3900345.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3900345.c
Checking for size_t... Yes.


=== ztest3900345.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3900345.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3900345 ztest3900345.c
Checking for strerror... Yes.

=== ztest3900345.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for unistd.h... Yes.

=== ztest3900345.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for stdarg.h... Yes.

=== ztest3900345.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3900345.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3900345 ztest3900345.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3900345.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for return value of vsnprintf()... Yes.

=== ztest3900345.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3900345.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 22:38:35 EEST 2025
=== ztest120363.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest120363.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest120363.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest120363.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest120363.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest120363.c
Checking for size_t... Yes.


=== ztest120363.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest120363.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest120363 ztest120363.c
Checking for strerror... Yes.

=== ztest120363.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for unistd.h... Yes.

=== ztest120363.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for stdarg.h... Yes.

=== ztest120363.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest120363.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest120363 ztest120363.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest120363.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for return value of vsnprintf()... Yes.

=== ztest120363.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest120363.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 22:49:52 EEST 2025
=== ztest473151.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest473151.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest473151.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest473151.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest473151.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest473151.c
Checking for size_t... Yes.


=== ztest473151.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest473151.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest473151 ztest473151.c
Checking for strerror... Yes.

=== ztest473151.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for unistd.h... Yes.

=== ztest473151.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for stdarg.h... Yes.

=== ztest473151.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest473151.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest473151 ztest473151.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest473151.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for return value of vsnprintf()... Yes.

=== ztest473151.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest473151.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:00:22 EEST 2025
=== ztest679854.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest679854.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest679854.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest679854.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest679854.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest679854.c
Checking for size_t... Yes.


=== ztest679854.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest679854.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest679854 ztest679854.c
Checking for strerror... Yes.

=== ztest679854.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for unistd.h... Yes.

=== ztest679854.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for stdarg.h... Yes.

=== ztest679854.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest679854.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest679854 ztest679854.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest679854.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for return value of vsnprintf()... Yes.

=== ztest679854.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest679854.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:03:08 EEST 2025
=== ztest735811.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest735811.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest735811.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest735811.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest735811.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest735811.c
Checking for size_t... Yes.


=== ztest735811.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest735811.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest735811 ztest735811.c
Checking for strerror... Yes.

=== ztest735811.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for unistd.h... Yes.

=== ztest735811.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for stdarg.h... Yes.

=== ztest735811.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest735811.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest735811 ztest735811.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest735811.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for return value of vsnprintf()... Yes.

=== ztest735811.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest735811.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:14:04 EEST 2025
=== ztest984162.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest984162.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest984162.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest984162.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest984162.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest984162.c
Checking for size_t... Yes.


=== ztest984162.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest984162.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest984162 ztest984162.c
Checking for strerror... Yes.

=== ztest984162.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for unistd.h... Yes.

=== ztest984162.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for stdarg.h... Yes.

=== ztest984162.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest984162.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest984162 ztest984162.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest984162.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for return value of vsnprintf()... Yes.

=== ztest984162.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest984162.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Mon May 26 23:19:07 EEST 2025
=== ztest1140414.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest1140414.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest1140414.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest1140414.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest1140414.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest1140414.c
Checking for size_t... Yes.


=== ztest1140414.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest1140414.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1140414 ztest1140414.c
Checking for strerror... Yes.

=== ztest1140414.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for unistd.h... Yes.

=== ztest1140414.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for stdarg.h... Yes.

=== ztest1140414.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest1140414.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest1140414 ztest1140414.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest1140414.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for return value of vsnprintf()... Yes.

=== ztest1140414.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest1140414.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:38:58 EEST 2025
=== ztest3443649.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3443649.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3443649.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3443649.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3443649.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3443649.c
Checking for size_t... Yes.


=== ztest3443649.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3443649.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3443649 ztest3443649.c
Checking for strerror... Yes.

=== ztest3443649.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for unistd.h... Yes.

=== ztest3443649.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for stdarg.h... Yes.

=== ztest3443649.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3443649.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3443649 ztest3443649.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3443649.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for return value of vsnprintf()... Yes.

=== ztest3443649.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3443649.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:41:10 EEST 2025
=== ztest3452912.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3452912.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3452912.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3452912.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3452912.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3452912.c
Checking for size_t... Yes.


=== ztest3452912.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3452912.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3452912 ztest3452912.c
Checking for strerror... Yes.

=== ztest3452912.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for unistd.h... Yes.

=== ztest3452912.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for stdarg.h... Yes.

=== ztest3452912.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3452912.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3452912 ztest3452912.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3452912.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for return value of vsnprintf()... Yes.

=== ztest3452912.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3452912.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:44:42 EEST 2025
=== ztest3465658.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3465658.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3465658.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3465658.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3465658.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3465658.c
Checking for size_t... Yes.


=== ztest3465658.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3465658.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3465658 ztest3465658.c
Checking for strerror... Yes.

=== ztest3465658.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for unistd.h... Yes.

=== ztest3465658.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for stdarg.h... Yes.

=== ztest3465658.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3465658.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3465658 ztest3465658.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3465658.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for return value of vsnprintf()... Yes.

=== ztest3465658.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3465658.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:46:29 EEST 2025
=== ztest3475708.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3475708.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3475708.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3475708.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3475708.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3475708.c
Checking for size_t... Yes.


=== ztest3475708.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3475708.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3475708 ztest3475708.c
Checking for strerror... Yes.

=== ztest3475708.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for unistd.h... Yes.

=== ztest3475708.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for stdarg.h... Yes.

=== ztest3475708.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3475708.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3475708 ztest3475708.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3475708.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for return value of vsnprintf()... Yes.

=== ztest3475708.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3475708.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:48:14 EEST 2025
=== ztest3483962.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3483962.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3483962.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3483962.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3483962.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3483962.c
Checking for size_t... Yes.


=== ztest3483962.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3483962.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3483962 ztest3483962.c
Checking for strerror... Yes.

=== ztest3483962.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for unistd.h... Yes.

=== ztest3483962.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for stdarg.h... Yes.

=== ztest3483962.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3483962.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3483962 ztest3483962.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3483962.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for return value of vsnprintf()... Yes.

=== ztest3483962.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3483962.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 17:55:02 EEST 2025
=== ztest3504767.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3504767.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3504767.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3504767.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3504767.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3504767.c
Checking for size_t... Yes.


=== ztest3504767.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3504767.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3504767 ztest3504767.c
Checking for strerror... Yes.

=== ztest3504767.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for unistd.h... Yes.

=== ztest3504767.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for stdarg.h... Yes.

=== ztest3504767.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3504767.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3504767 ztest3504767.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3504767.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for return value of vsnprintf()... Yes.

=== ztest3504767.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3504767.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 18:01:58 EEST 2025
=== ztest3527256.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3527256.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3527256.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3527256.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3527256.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3527256.c
Checking for size_t... Yes.


=== ztest3527256.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3527256.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3527256 ztest3527256.c
Checking for strerror... Yes.

=== ztest3527256.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for unistd.h... Yes.

=== ztest3527256.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for stdarg.h... Yes.

=== ztest3527256.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3527256.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3527256 ztest3527256.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3527256.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for return value of vsnprintf()... Yes.

=== ztest3527256.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3527256.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 18:05:25 EEST 2025
=== ztest3539393.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3539393.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3539393.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3539393.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3539393.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3539393.c
Checking for size_t... Yes.


=== ztest3539393.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3539393.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3539393 ztest3539393.c
Checking for strerror... Yes.

=== ztest3539393.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for unistd.h... Yes.

=== ztest3539393.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for stdarg.h... Yes.

=== ztest3539393.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3539393.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3539393 ztest3539393.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3539393.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for return value of vsnprintf()... Yes.

=== ztest3539393.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3539393.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 18:08:25 EEST 2025
=== ztest3550057.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3550057.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3550057.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3550057.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3550057.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3550057.c
Checking for size_t... Yes.


=== ztest3550057.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3550057.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3550057 ztest3550057.c
Checking for strerror... Yes.

=== ztest3550057.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for unistd.h... Yes.

=== ztest3550057.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for stdarg.h... Yes.

=== ztest3550057.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3550057.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3550057 ztest3550057.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3550057.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for return value of vsnprintf()... Yes.

=== ztest3550057.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3550057.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:20:12 EEST 2025
=== ztest3742451.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3742451.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3742451.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3742451.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3742451.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3742451.c
Checking for size_t... Yes.


=== ztest3742451.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3742451.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3742451 ztest3742451.c
Checking for strerror... Yes.

=== ztest3742451.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for unistd.h... Yes.

=== ztest3742451.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for stdarg.h... Yes.

=== ztest3742451.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3742451.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3742451 ztest3742451.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3742451.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for return value of vsnprintf()... Yes.

=== ztest3742451.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3742451.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:30:23 EEST 2025
=== ztest3774325.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3774325.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3774325.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3774325.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3774325.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3774325.c
Checking for size_t... Yes.


=== ztest3774325.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3774325.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3774325 ztest3774325.c
Checking for strerror... Yes.

=== ztest3774325.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for unistd.h... Yes.

=== ztest3774325.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for stdarg.h... Yes.

=== ztest3774325.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3774325.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3774325 ztest3774325.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3774325.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for return value of vsnprintf()... Yes.

=== ztest3774325.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3774325.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:42:06 EEST 2025
Checking for gcc...
=== ztest3808708.c ===
extern int getchar();
int hello() {return getchar();}
===
-c ztest3808708.c
... using

Checking for obsessive-compulsive compiler options...
=== ztest3808708.c ===
int foo() { return 0; }
===
-c -O ztest3808708.c
./configure: 370: -c: not found
(exit code 127)
Compiler error reporting is too harsh for ./configure (perhaps remove -Werror).
** ./configure aborting.
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:45:29 EEST 2025
=== ztest3823757.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3823757.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3823757.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3823757.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3823757.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3823757.c
Checking for size_t... Yes.


=== ztest3823757.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3823757.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3823757 ztest3823757.c
Checking for strerror... Yes.

=== ztest3823757.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for unistd.h... Yes.

=== ztest3823757.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for stdarg.h... Yes.

=== ztest3823757.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3823757.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3823757 ztest3823757.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3823757.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for return value of vsnprintf()... Yes.

=== ztest3823757.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3823757.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 19:59:55 EEST 2025
=== ztest3868416.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest3868416.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest3868416.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest3868416.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest3868416.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest3868416.c
Checking for size_t... Yes.


=== ztest3868416.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest3868416.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3868416 ztest3868416.c
Checking for strerror... Yes.

=== ztest3868416.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for unistd.h... Yes.

=== ztest3868416.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for stdarg.h... Yes.

=== ztest3868416.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest3868416.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest3868416 ztest3868416.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest3868416.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for return value of vsnprintf()... Yes.

=== ztest3868416.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest3868416.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 21:49:57 EEST 2025
=== ztest4116626.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4116626.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4116626.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4116626.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4116626.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4116626.c
Checking for size_t... Yes.


=== ztest4116626.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4116626.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4116626 ztest4116626.c
Checking for strerror... Yes.

=== ztest4116626.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for unistd.h... Yes.

=== ztest4116626.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for stdarg.h... Yes.

=== ztest4116626.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4116626.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4116626 ztest4116626.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4116626.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for return value of vsnprintf()... Yes.

=== ztest4116626.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4116626.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 21:51:49 EEST 2025
=== ztest4123512.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4123512.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4123512.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4123512.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4123512.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4123512.c
Checking for size_t... Yes.


=== ztest4123512.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4123512.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4123512 ztest4123512.c
Checking for strerror... Yes.

=== ztest4123512.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for unistd.h... Yes.

=== ztest4123512.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for stdarg.h... Yes.

=== ztest4123512.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4123512.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4123512 ztest4123512.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4123512.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for return value of vsnprintf()... Yes.

=== ztest4123512.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4123512.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 21:55:04 EEST 2025
=== ztest4132853.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4132853.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4132853.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4132853.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4132853.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4132853.c
Checking for size_t... Yes.


=== ztest4132853.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4132853.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4132853 ztest4132853.c
Checking for strerror... Yes.

=== ztest4132853.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for unistd.h... Yes.

=== ztest4132853.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for stdarg.h... Yes.

=== ztest4132853.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4132853.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4132853 ztest4132853.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4132853.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for return value of vsnprintf()... Yes.

=== ztest4132853.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4132853.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:10:13 EEST 2025
=== ztest4167107.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4167107.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4167107.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4167107.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4167107.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4167107.c
Checking for size_t... Yes.


=== ztest4167107.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4167107.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4167107 ztest4167107.c
Checking for strerror... Yes.

=== ztest4167107.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for unistd.h... Yes.

=== ztest4167107.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for stdarg.h... Yes.

=== ztest4167107.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4167107.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4167107 ztest4167107.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4167107.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for return value of vsnprintf()... Yes.

=== ztest4167107.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4167107.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:13:49 EEST 2025
=== ztest4178430.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4178430.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4178430.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4178430.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4178430.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4178430.c
Checking for size_t... Yes.


=== ztest4178430.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4178430.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4178430 ztest4178430.c
Checking for strerror... Yes.

=== ztest4178430.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for unistd.h... Yes.

=== ztest4178430.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for stdarg.h... Yes.

=== ztest4178430.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4178430.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4178430 ztest4178430.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4178430.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for return value of vsnprintf()... Yes.

=== ztest4178430.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4178430.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:16:08 EEST 2025
=== ztest4186527.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4186527.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4186527.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4186527.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4186527.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4186527.c
Checking for size_t... Yes.


=== ztest4186527.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4186527.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4186527 ztest4186527.c
Checking for strerror... Yes.

=== ztest4186527.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for unistd.h... Yes.

=== ztest4186527.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for stdarg.h... Yes.

=== ztest4186527.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4186527.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4186527 ztest4186527.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4186527.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for return value of vsnprintf()... Yes.

=== ztest4186527.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4186527.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:16:37 EEST 2025
=== ztest4190369.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest4190369.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest4190369.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest4190369.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest4190369.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest4190369.c
Checking for size_t... Yes.


=== ztest4190369.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest4190369.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4190369 ztest4190369.c
Checking for strerror... Yes.

=== ztest4190369.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for unistd.h... Yes.

=== ztest4190369.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for stdarg.h... Yes.

=== ztest4190369.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest4190369.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest4190369 ztest4190369.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest4190369.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for return value of vsnprintf()... Yes.

=== ztest4190369.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest4190369.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:29:15 EEST 2025
=== ztest29651.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest29651.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest29651.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest29651.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest29651.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest29651.c
Checking for size_t... Yes.


=== ztest29651.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest29651.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest29651 ztest29651.c
Checking for strerror... Yes.

=== ztest29651.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for unistd.h... Yes.

=== ztest29651.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for stdarg.h... Yes.

=== ztest29651.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest29651.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest29651 ztest29651.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest29651.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for return value of vsnprintf()... Yes.

=== ztest29651.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest29651.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:29:42 EEST 2025
=== ztest33392.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest33392.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest33392.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest33392.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest33392.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest33392.c
Checking for size_t... Yes.


=== ztest33392.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest33392.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest33392 ztest33392.c
Checking for strerror... Yes.

=== ztest33392.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for unistd.h... Yes.

=== ztest33392.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for stdarg.h... Yes.

=== ztest33392.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest33392.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest33392 ztest33392.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest33392.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for return value of vsnprintf()... Yes.

=== ztest33392.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest33392.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


--------------------
./configure --prefix=/home/gskondras/GPUbismZ/ThirdParty/zlib/../build --static
Tue May 27 22:33:01 EEST 2025
=== ztest43559.c ===
extern int getchar();
int hello() {return getchar();}
===
mpicc -c ztest43559.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest43559.c ===
int foo() { return 0; }
===
mpicc -c -O3 ztest43559.c

Building static library libz.a version 1.2.11 with mpicc.

=== ztest43559.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
mpicc -c -O3 ztest43559.c
Checking for size_t... Yes.


=== ztest43559.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for off64_t... Yes.
Checking for fseeko... Yes.

=== ztest43559.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest43559 ztest43559.c
Checking for strerror... Yes.

=== ztest43559.c ===
#include <unistd.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for unistd.h... Yes.

=== ztest43559.c ===
#include <stdarg.h>
int main() { return 0; }
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for stdarg.h... Yes.

=== ztest43559.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest43559.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -O3 -D_LARGEFILE64_SOURCE=1 -o ztest43559 ztest43559.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest43559.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for return value of vsnprintf()... Yes.

=== ztest43559.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
mpicc -c -O3 -D_LARGEFILE64_SOURCE=1 ztest43559.c
Checking for attribute(visibility) support... Yes.

ALL = static all64
AR = ar
ARFLAGS = rc
CC = mpicc
CFLAGS = -O3 -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
CPP = mpicc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = mpicc
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O3 -fPIC -D_LARGEFILE64_SOURCE=1 -DHAVE_HIDDEN
SHAREDLIB =
SHAREDLIBM =
SHAREDLIBV =
STATICLIB = libz.a
TEST = all teststatic test64
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /home/gskondras/GPUbismZ/ThirdParty/zlib/../build
sharedlibdir = ${libdir}
uname = Linux
--------------------


